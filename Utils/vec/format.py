import argparse
from os.path import exists
from collections import OrderedDict


version = '1.0.0'
headings = "#FORMAT TUNER V4 SAMSoftV44\n\
; This file was generated by SAMTuner, the #FORMAT statement must be the 1st line.\n\
; please do not edit it manually unless you are familiar with the file format,\n\
; otherwise you may corrupt the file.\n"


class VecFormat:
    def __init__(self):
        self.data = dict()
        self.headings = headings

    def read(self, input_path):
        if not input_path.endswith(".vec"):
            print("Not support format, please input .vec")
            return False

        self.data.clear()
        vec_file = open(input_path, "r")

        # skip heading
        line = vec_file.readline()  # #FORMAT TUNER V4 SAMSoftV44\n
        line = vec_file.readline()  # ; This file was generated by SAMTuner, the #FORMAT statement must be the 1st line.\n
        line = vec_file.readline()  # ; please do not edit it manually unless you are familiar with the file format,\n
        line = vec_file.readline()  # ; otherwise you may corrupt the file.\n

        mode = ""
        parm_dict = dict()
        while True:
            line = vec_file.readline()
            if line == '':
                # end of file, save dict and leave
                if mode != "":
                    self.data[mode] = parm_dict.copy()
                    parm_dict.clear()
                break
            elif line.startswith(";") or line.strip() == "":
                # commented out sentence
                continue
            elif line.startswith("#SEGMENT"):
                # save previous dict
                if mode != "":
                    self.data[mode] = parm_dict.copy()
                    parm_dict.clear()

                mode = line[24:].strip()
                # read until #PARAMS
                while True:
                    line = vec_file.readline()
                    if line == "#PARAMS\n":
                        break
            else:
                # read parameters
                key = line.strip().split(' ')[0]
                value = line.strip().split(' ')[1]
                value = int(value, 16)
                if key in parm_dict.keys():
                    index = 1
                    kk = 'm' + str(index) + '_' + key
                    while kk in parm_dict.keys():
                        index += 1
                    key = kk

                parm_dict[key] = value

        vec_file.close()

    def sort(self):
        for mode, vec in self.data.items():
            self.data[mode] = OrderedDict(sorted(vec.items()))

    def write(self, output_path):
        output_file = open(output_path, "w")
        output_file.write(self.headings)
        output_file.write("\n")
        for mode, vec in self.data.items():
            output_file.write("#SEGMENT SEGMENT_SIZE 0 {}\n\n#PARAMS\n".format(mode))

            for key, value in vec.items():
                value = "{0:#0{1}X}".format(value, 6)[2:]
                if key.startswith('m'):
                    print("[{}][MPO] {}: {}".format(mode, key, value))
                    key = key[-4:]  # remove subffix of duplicate address
                output_file.write("{} {}\n".format(key, value))

            output_file.write("\n")
        output_file.close()


def main():
    description = "VecFormat {}, sorting the vec file".format(version)
    argpars = argparse.ArgumentParser(description=description)
    argpars.add_argument("--input", "-i", default="", type=str)
    argpars.add_argument("--output", "-o", default="", type=str)

    parse_value = argpars.parse_args()
    input_path = parse_value.input
    output_path = parse_value.output

    if not exists(input_path):
        print("input file doesn't exist")
        exit()

    formatter = VecFormat()
    formatter.read(input_path)
    formatter.sort()
    formatter.write(output_path)


if __name__ == "__main__":
    main()
